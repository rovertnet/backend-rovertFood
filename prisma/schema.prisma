generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categorie {
  id        Int      @id @default(autoincrement())
  nom      String
  imageUrl  String?   // Lien vers l'image
  menus     Menu[]
  createdAt DateTime @default(now())
}

model Menu {
  id          Int       @id @default(autoincrement())
  nom         String
  description String?
  prix        Float
  disponible  Boolean       @default(true)
  image       String?   // chemin ou nom du fichier
  categorie   Categorie @relation(fields: [categorieId], references: [id])
  categorieId Int
  commandes   CommandeMenu[]
  panierItems PanierItem[]   // üëà Ajout pour relation inverse avec PanierItem
  wishlistItems WishlistMenu[] // üëà Ajout pour relation inverse avec WishlistMenu
}

model Restaurant {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  createdAt DateTime @default(now())
}

model Panier {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  items     PanierItem[]
  createdAt DateTime  @default(now())
}

model PanierItem {
  id        Int     @id @default(autoincrement())
  panier    Panier  @relation(fields: [panierId], references: [id])
  panierId  Int
  menu      Menu    @relation(fields: [menuId], references: [id])
  menuId    Int
  quantite  Int
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  menus     WishlistMenu[]
}

model WishlistMenu {
  id         Int      @id @default(autoincrement()) // ‚Üê cl√© primaire simple
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId Int
  menu       Menu     @relation(fields: [menuId], references: [id])
  menuId     Int
}

model Newsletter {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Equipe {
  id        Int      @id @default(autoincrement())
  nom       String
  role      String
  photoUrl  String?
}

model User {
  id          Int        @id @default(autoincrement())
  nom         String
  email       String     @unique
  motDePasse  String
  role        Role       @default(CLIENT)
  commandes   Commande[]
  paniers     Panier[]
  wishlists   Wishlist[]
}

model CommandeMenu {
  commande   Commande @relation(fields: [commandeId], references: [id])
  commandeId Int
  menu       Menu     @relation(fields: [menuId], references: [id])
  menuId     Int

  @@id([commandeId, menuId])
}

model Contact {
  id        Int      @id @default(autoincrement())
  nom       String
  email     String
  message   String
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  CLIENT
}

model Commande {
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id])
  userId        Int
  date          DateTime        @default(now())
  status        StatutCommande  @default(EN_ATTENTE)
  menus         CommandeMenu[]
}

enum StatutCommande {
  EN_ATTENTE
  EN_COURS
  LIVREE
}